"" VIMRC File

source ~/.vim/vim_functions.vim

": SETTINGS (((
filetype indent plugin on
syntax on
set backspace=indent,eol,start
set background=dark
set encoding=utf-8
set t_Co=256

set tabstop=4
set shiftwidth=4
set textwidth=0
set expandtab
set nowrap
set number
set relativenumber
set autoindent
set copyindent
set smartindent
set autochdir
set autoread
set hidden
set cursorline
set cursorlineopt=number
set ignorecase
set smartcase
set incsearch
set number
set relativenumber
set foldmarker=(((,)))
set foldlevel=3
set foldlevelstart=3
set foldcolumn=3
set signcolumn=yes
set laststatus=2
set showcmd
set showmatch
set scrolloff=5
set sidescrolloff=8
set path+=**
set timeoutlen=500

set completeopt=menuone,popup
set wildmode=list:longest,full

set undodir=~/.vim/undodir
set directory=~/.vim/backup
set backupdir=~/.vim/backup
set undofile
set backup
set writebackup
set swapfile
set updatetime=300

let mapleader=" "
let maplocalleader="\\"
": SETTINGS )))

": PLUGINS (((
source ~/.vim/pre_vim-plug.vim

call plug#begin()
Plug 'rafi/awesome-vim-colorschemes'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'ervandew/supertab'
Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
Plug 'dense-analysis/ale'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

source ~/.vim/post_vim-plug.vim
" )))

colorscheme retrobox

": MAPPINGS (((
inoremap kj <ESC>
vnoremap kj <ESC>

" Easy Motion ((( "
map <leader>mf <Plug>(easymotion-bd-f)
nmap <leader>mf <Plug>(easymotion-overwin-f)
nmap <leader>ms <Plug>(easymotion-overwin-f2)
map <leader>ml <Plug>(easymotion-bd-jk)
nmap <leader>ml <Plug>(easymotion-overwin-line)
map <leader>mw <Plug>(easymotion-bd-w)
nmap <leader>mw <Plug>(easymotion-overwin-w)
" ))) Easy Motion "

" FZF ((( "
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fg :GFiles<CR>
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>fcc :Commits<CR>
nnoremap <leader>fcb :BCommits<CR>
nnoremap <leader>fm :Marks<CR>
nnoremap <leader>fu :Snippets<CR>
" ))) FZF "

" Which Key ((( "
nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey '\'<CR>
" ))) Which Key "

" Fugitive ((( "
nnoremap <silent><leader>ga :Git add .<cr>
nnoremap <silent><leader>gc :Git commit<cr>
nnoremap <leader>gs :GFiles?<CR>
" ))) Fugitive "

" UndoTree ((( "
" nnoremap <leader>ut :UndotreeToggle<cr>:vertical resize -30<cr><C-w>l
nnoremap <leader>ut :UndotreeToggle<cr>
" ))) UndoTree "

" COC ((( "
nnoremap <leader>rn :CocCommand document.renameCurrentWord<cr>
nnoremap <leader>rn <Plug>(coc-rename)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)
"" Applying code actions to the selected code block
"" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>aac  <Plug>(coc-codeaction-cursor)
" nmap <leader>aas  <Plug>(coc-codeaction-source)
" nmap <leader>qf  <Plug>(coc-fix-current)
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" nmap <leader>cl  <Plug>(coc-codelens-action)

nnoremap <silent> K :call ShowDocumentation()<CR>
" nnoremap <silent><nowait> <leader>ca  :<C-u>CocList diagnostics<cr>
" nnoremap <silent><nowait> <leader>ce  :<C-u>CocList extensions<cr>
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
" nnoremap <silent><nowait> <leader>co  :<C-u>CocList outline<cr>
" nnoremap <silent><nowait> <leader>cs  :<C-u>CocList -I symbols<cr>
" nnoremap <silent><nowait> <leader>cj  :<C-u>CocNext<CR>
" nnoremap <silent><nowait> <leader>ck  :<C-u>CocPrev<CR>
" nnoremap <silent><nowait> <leader>cp  :<C-u>CocListResume<CR>
" ))) COC "

nnoremap <leader>w :write<cr>
nnoremap <leader>q ZQ
nnoremap <leader>z ZZ
nnoremap <silent> <leader>o :edit .<cr>
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>:do FileType<cr>:do BufEnter<cr>
nnoremap <leader>t :shell<cr>

nnoremap <leader>x :colorscheme s
nnoremap <silent><leader>in :call Indent()<cr>
nnoremap <silent> <leader>nb :bnext<cr>
nnoremap <silent> <leader>pb :bprevious<cr>
nnoremap <silent> <S-b> _
nnoremap <silent> <S-e> $
nnoremap <silent> <S-y> y$
nnoremap <silent> <F8> @
nnoremap <silent> <F9> @@
nnoremap <silent> <leader>a zt
nnoremap <silent> <leader>bn :bnext<Cr>
nnoremap <silent> <leader>bp :bprev<cr>
nnoremap w W
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
vnoremap <silent> J :m '>+1<cr>gv=gv
vnoremap <silent> K :m '<-2<cr>gv=gv
vnoremap <silent> < <gv
vnoremap <silent> > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>

nnoremap <silent> <leader>to :tabnew<cr>
nnoremap <silent> <leader>tn :tabnext<cr>
nnoremap <silent> <leader>tp :tabprevious<cr>
nnoremap <silent> <leader>tc :tabclose<cr>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent><leader>kk :vertical resize+5<cr>
nnoremap <silent><leader>ll :resize+5<cr>
"" MAPPINGS )))

": GROUPS (((
augroup ALL " (((
  au!
  au BufEnter * call GetLine()
  " au BufEnter * :normal! `i
  " au BufWritePre,BufLeave,Vimleave * :normal mi
  au BufWritepre * call StripWhiteSpace()
  au BufWritepre $MYVIMRC,*.vim,*.c,*.h,*.rs,*.ino,*.sh call Indent()
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
augroup END " )))

augroup ABBREV " (((
  au!
  au BufEnter * iabbrev <buffer> ifos itsf4llofstars
  au BufEnter * iabbrev <buffer> emal irooted4hal@mailfence.com
  au BufEnter * iabbrev <buffer> pirnt print
  au BufEnter * iabbrev <buffer> prnit print
  au BufEnter * iabbrev <buffer> pritn print
  au BufEnter * iabbrev <buffer> prtn print
  au BufEnter * iabbrev <buffer> prnt print
  au BufEnter * iabbrev <buffer> slef self
  au BufEnter * iabbrev <buffer> sefl self
  au BufEnter * iabbrev <buffer> sfel self
  au BufEnter * iabbrev <buffer> sfle self
  au BufEnter * iabbrev <buffer> ptah path
  au BufEnter * iabbrev <buffer> paht path
  au BufEnter * iabbrev <buffer> phat path
  au BufEnter * iabbrev <buffer> phta path
augroup END " )))

augroup VIM " (((
  au!
  au FileType vim setlocal ts=2 sw=2 fdm=marker fdc=1
  au BufEnter $MYVIMRC,*.vim nnoremap <buffer> <leader>c :normal! 0i"<space><esc>$
augroup END " )))

augroup PYTHON " (((
  au!
  au FileType python setlocal fdm=indent fdc=3
  au BufEnter *.py nnoremap <buffer> <F5> :write<cr>:!python3 %<cr>
  au BufEnter *.py nnoremap <buffer> <F6> :!black %<cr>
  au BufEnter *.py nnoremap <buffer> <F7> :!pylint %<cr>
  " au BufEnter *.py nnoremap <buffer> <leader>in :call Indent()<cr>
  au BufEnter *.py nnoremap <buffer> <leader>c :normal! 0i#<space><esc>$
  au BufEnter *.py let @u=':vsplitl:edit ~/.vim/plugged/vim-snippets/UltiSnips/python_snips.txt:vertical resize -50h'
  " au BufEnter *.py let @u=':vsplitl:edit ~/.vim/plugged/vim-snippets/Ultisnips/'
augroup END " )))

augroup C " (((
  au!
  au FileType c setlocal ts=8 sw=8 fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.c,*.h nnoremap <buffer> <leader>mm :!make main<cr>
  au BufEnter *.c,*.h nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.c,*.h, nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufEnter *.c,*.h nnoremap <buffer> <leader>c :normal! 0i//<space><esc>$
augroup END " )))

augroup RUST " (((
  au!
  au FileType rust setlocal fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au FileType rust iabbrev print println!
  au BufEnter *.rs nnoremap <buffer> <leader>b A{<cr>}<esc>ko
  au BufEnter *.rs nnoremap <buffer> <leader>c :normal! 0i//<space><esc>$
  au BufEnter *.rs nnoremap <buffer> <F5> :!cargo run<cr>
augroup END " )))

augroup ARDUINO " (((
  au!
  au FileType arduino setlocal ts=2 sw=2 fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.ino nnoremap <buffer> <leader>c :normal! 0i//<space><esc>$
augroup END " )))

augroup BASH " (((
  au!
  au FileType sh setlocal cc=80
  au BufEnter *.sh nnoremap <buffer> <F5> :!./%<cr>
  au BufEnter *.sh nnoremap <buffer> <leader>c :normal! 0i#<space><esc>$
augroup END " )))

augroup HTML_CSS " (((
  au!
  au FileType html setlocal ts=2 sw=2 cc=80,100,120 fdc=4 fdm=manual aw updatetime=1000
  au FileType html,css nnoremap <buffer> <localleader>f Vatzf
  au BufRead,BufEnter *.html nnoremap <buffer> <localleader>c i<!----><esc>2hi<space><esc>i<space>
  au BufRead,BufEnter *.css nnoremap <buffer> <localleader>c i/**/<esc>hi<space><esc>i<space>
  au BufRead,BufEnter *.html :onoremap <buffer> it :<c-u>normal! f<vi<<cr>
  au FileType html,css colorscheme onedark
  au CursorHold *.html,*.css write
augroup END " )))

augroup TEXT " (((
  au!
  "   au BufEnter *.txt call WordProcessor()
  au BufEnter *.txt nnoremap <buffer> <leader>c :normal! 0i//<space><esc>$
augroup END " )))

augroup TOML " (((
  au!
  au FileType toml setlocal ts=2 sw=2 nofen
  au BufEnter *.toml nnoremap <buffer> <leader>c :normal! 0i#<space><esc>$
augroup END " )))

augroup JSON " (((
  au!
  au fileType json syntax match Comment +\/\/.\+$+
  au BufEnter *.json nnoremap <buffer> <leader>c :normal! 0i//<space><esc>$
augroup END " )))
" : GROUPS )))
