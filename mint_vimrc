"          _
"  __   __(_) _ __ ___   _ __  ___
"  \ \ / /| || '_ ` _ \ | '__|/ __|
"  _\ V / | || | | | | || |  | (__
" (_)\_/  |_||_| |_| |_||_|   \___|
"

"# Table (Search for [nn])
"# settings [sx]
"# vim plug [px]
"# mappings [mx]
"# groups [gx]

"# FUNCTIONS (((
function GetLine()
  " autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe (WRAP IN QUOTES)normal g'\" | endif
  if line("'\"") > 1 && line("'\"") <= line("$")
    exec "normal g'\""
  endif
endfunction

function Indent()
  :normal! mpHmogg=G'ozt`p
endfunction

function StripWhiteSpace()
  :normal! mpHmo
  %s/\s\+$//e
  :normal! 'ozt`p
endfunction

function ShowWhitespace()
  match ErrorMsg '\s\+$'
endfunction
"# )))

"# settings sx (((
filetype indent plugin on
syntax on
set encoding=utf-8
set backspace=indent,eol,start
set guicursor=""
set background=dark

if $TERM == "xterm-256color"
  set termguicolors
endif

set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=0
set expandtab
set nowrap
set autoindent
set copyindent
set smartindent
set autochdir
set autoread
set hidden
set cursorline
set cursorlineopt=both
set ignorecase
set smartcase
set incsearch
set nohlsearch
set number
set relativenumber
set foldmarker=(((,)))
set foldlevel=4
set foldlevelstart=3
set foldcolumn=3
set signcolumn=yes
set laststatus=2
set noruler
set modeline
set laststatus=2
set statusline=
set statusline=(%n)\ %F\ %m%r%w%h%q%a\ %y\ \ \ col:\ %c\ \ %p%%%=[%c:%L]\ \ \ %p%%\ -\ %P\ \ \ |
set showmatch
set showcmd
set noshowmode
set scrolloff=5
set sidescrolloff=8
set path+=**

set updatetime=300
set timeoutlen=500
set completeopt=menuone,popup
set wildmode=list:longest,full

set nobackup
set nowritebackup

if has("persistent_undo")
  let target_path = expand("~/.vim/undodir")
  let target_backup = expand("~/.vim/backup")

  if !isdirectory(target_path)
    call mkdir(target_path, "p", 0700)
  endif

  let &undodir=target_path
  let &backupdir=target_backup
  set undofile
  set swapfile
else
  set noundofile
  set noswapfile
endif

call ShowWhitespace()

let mapleader=" "
let maplocalleader="\\"
"# )))

"# ALE (((
let g:ale_set_signs = 1
let g:ale_max_signs = -1
let g:ale_close_preview_on_insert = 1
let g:ale_completion_enabled = 1
let g:ale_disable_lsp = 0
let g:ale_lsp_suggestions = 1
let g:ale_linters_explicit = 1
let g:ale_warn_about_trailing_blank_lines = 1
let g:ale_warn_about_trailing_whitespace = 1
let g:ale_virtualtext_cursor = 'disabled' " 'current', 'disabled', 'all'
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_loclist_msg_format = '[%linter%] %s [%severity%]'
let g:ale_popup_menu_enabled = 0
let g:ale_detail_to_floating_preview = 0
let g:ale_cursor_detail = 0
let g:ale_hover_cursor = 0
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_echo_cursor = 0
let g:ale_disable_lsp = 0
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1
let g:ale_enabled = 0
"# ALE )))

"# VIM_PLUG (((
call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
" Plug 'honza/vim-snippets'
Plug 'liuchengxu/vim-which-key'
call plug#end()

colorscheme retrobox
"colorscheme gruvbox
"# )))

"# ALE (((
let g:ale_linters = {
      \ 'python': ['pylint'],
      \ 'rust': ['analyzer'],
      \ 'vim': [''],
      \ 'cpp': ['clangd', 'cpplint'],
      \ 'c': ['cppcheck', 'cpplint'],
      \ 'json': ['eslint'],
      \ }
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python': ['black', 'isort'],
      \ 'rust': ['rustfmt'],
      \ 'cpp': ['clang-format'],
      \ 'c': ['clang-format'],
      \ 'json': ['prettier'],
      \ }

nmap <silent> <C-p> <Plug>(ale_previous_wrap)
nmap <silent> <C-n> <Plug>(ale_next_wrap)
"# )))

"# LESSER PLUGINS (((
let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','

map <leader>f <Plug>(easymotion-bd-f)
nmap <leader>f <Plug>(easymotion-overwin-f)
nmap <leader>s <Plug>(easymotion-overwin-f2)
map <leader>l <Plug>(easymotion-bd-jk)
nmap <leader>l <Plug>(easymotion-overwin-line)
map <leader>d <Plug>(easymotion-bd-w)
nmap <leader>d <Plug>(easymotion-overwin-w)

nnoremap <leader>ut :UndotreeToggle<cr><C-w>h<C-w>l
nnoremap <leader>ga :Git add .<CR>
nnoremap <leader>gc :Git commit<CR>

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey '\'<CR>

let g:lightline = {'colorscheme': 'srcery_drk'}
"# )))

"# mappings mx (((
inoremap kj <ESC>
vnoremap kj <ESC>

nnoremap <leader>w :write<CR>
nnoremap <leader>q ZQ
nnoremap <leader>z ZZ
nnoremap <leader>o :edit .<CR>
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>so :write<cr>:source $MYVIMRC<cr>
nnoremap <leader>t :shell<CR>

nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap <F8> @
nnoremap <F9> @@
nnoremap <leader>a zt
nnoremap w W
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>
nnoremap <leader>to :tabnew<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tp :tabprevious<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <silent> <localleader>v :vsplit<cr><C-w>l
nnoremap <silent> <localleader>s :split<cr><C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l
nnoremap <leader>kk :vertical resize+5<CR>
nnoremap <leader>jj :resize+5<CR>
"nnoremap <leader>rs <C-w>=
"# )))

"# groups gx (((
augroup ALL " (((
  au!
  au BufEnter * call GetLine()
  au BufWritepre * call StripWhiteSpace()
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
  au BufEnter * iabbrev teh the
  au BufEnter * iabbrev tow two
augroup END " )))

augroup COMMON " (((
  au!
  au BufWritepre *.vim,*.py,*.c,*.cpp,*.h,*.rs,*.ino,*.sh,*.json call Indent()
  au BufEnter *.c,*.h, nnoremap <buffer> <leader>b o{<cr>}<esc>ko
augroup END " )))

augroup VIM " (((
  au!
  au FileType vim setlocal ts=2 sw=2 sts=2 fdm=marker
augroup END " )))

augroup PYTHON " (((
  au!
  au FileType python setlocal ts=4 sw=4 sts=4
augroup END " )))

augroup C " (((
  au!
  au FileType c setlocal fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
augroup END " )))

augroup RUST " (((
  au!
  au FileType rust setlocal fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.rs nnoremap <buffer> <leader>b A{<cr>}<esc>ko
augroup END " )))

augroup ARDUINO " (((
  au!
  au FileType arduino setlocal ts=2 sw=2 sts=2 fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
augroup END " )))

augroup BASH " (((
  au!
  au FileType sh setlocal cc=80
augroup END " )))

augroup TEXT
  au!
  au FileType text silent setlocal tw=79 wrap nofen fdc=0
augroup END

augroup JSON " (((
  au!
  au fileType json syntax match Comment +\/\/.\+$+
augroup END " )))
"# )))

"# NOTES (((
" LIGHTLINE: The colorscheme for lightline.vim.
" Currently, wombat, solarized, powerline, powerlineish,
" jellybeans, molokai, seoul256, darcula,
" selenized_dark, selenized_black, selenized_light, selenized_white,
" Tomorrow, *Tomorrow_Night, Tomorrow_Night_Blue,
" *Tomorrow_Night_Bright, *Tomorrow_Night_Eighties, PaperColor,
" landscape, one, materia, material, OldHope, nord, *deus,
" simpleblack, **srcery_drk, ayu_mirage, ayu_light, ayu_dark,
" **apprentice, *rosepine, and 16color are available.
"# )))
