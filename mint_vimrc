<<<<<<< HEAD
"          _
"  __   __(_) _ __ ___   _ __  ___
"  \ \ / /| || '_ ` _ \ | '__|/ __|
"  _\ V / | || | | | | || |  | (__
" (_)\_/  |_||_| |_| |_||_|   \___|
"

" See below for additional sources
" sources at bottom
" https://github.com/neoclide/coc.nvim/wiki/Completion-with-sources#use-tab-or-custom-key-for-trigger-completion
" dictionarys
" https://github.com/neoclide/coc-sources

"" Set variable to change <CR> coc-completion method, see below
let g:COC_TRIGGER = 2

"" FUNCTIONS (((
function GetLine()
  if line("'\"") > 1 && line("'\"") <= line("$")
    exec "normal g'\""
  endif
endfunction

function Indent()
  let l:view = winsaveview()
  :normal! gg=G
  call winrestview(l:view)
endfunction

function StripWhiteSpace()
  let l:view = winsaveview()
  %s/\s\+$//e
  call winrestview(l:view)
=======
": VIMRC

function GetLine()
  if line("'\"") > 1 && line("'\"") <= line("$") | exec "normal g'\"" | endif
>>>>>>> mint
endfunction

function ShowWhitespace()
  match ErrorMsg '\s\+$'
endfunction

<<<<<<< HEAD
function! WordProcessor()
  if &filetype == 'text'
    set textwidth=79
    set colorcolum=80
    set smartindent
    set wrap
    set nofoldenable
    set foldcolumn=1
    set spelllang=en_us
    set spell
  endif
endfunction
" FUNCTIONS )))

function PrePluginSetup() " (((
  let g:ale_set_signs = 1
  let g:ale_max_signs = -1
  let g:ale_close_preview_on_insert = 1
  let g:ale_completion_enabled = 1
  let g:ale_disable_lsp = 0
  let g:ale_lsp_suggestions = 1
  let g:ale_linters_explicit = 1
  let g:ale_warn_about_trailing_blank_lines = 1
  let g:ale_warn_about_trailing_whitespace = 1
  let g:ale_virtualtext_cursor = 'disabled' " 'current', 'disabled', 'all'
  let g:ale_sign_error = '>>'
  let g:ale_sign_warning = '--'
  let g:ale_sign_column_always = 1
  let g:ale_set_highlights = 1
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_info_str = 'I'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_loclist_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_popup_menu_enabled = 0
  let g:ale_detail_to_floating_preview = 0
  let g:ale_cursor_detail = 0
  let g:ale_hover_cursor = 0
  let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
  let g:ale_echo_cursor = 0
  let g:ale_disable_lsp = 0
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_lint_on_insert_leave = 0
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_save = 1
  let g:ale_fix_on_save = 1
  let g:ale_enabled = 0
endfunction
" )))

function PostPluginSetup() " (((
  let g:ale_linters = {
        \ 'python': ['pylint'],
        \ 'rust': ['analyzer'],
        \ 'vim': [''],
        \ 'cpp': ['clangd', 'cpplint'],
        \ 'c': ['cppcheck', 'cpplint'],
        \ 'json': ['eslint'],
        \ }
  let g:ale_fixers = {
        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
        \ 'python': ['black', 'isort'],
        \ 'rust': ['rustfmt'],
        \ 'cpp': ['clang-format'],
        \ 'c': ['clang-format'],
        \ 'json': ['prettier'],
        \ }

  nmap <silent> <C-p> <Plug>(ale_previous_wrap)
  nmap <silent> <C-n> <Plug>(ale_next_wrap)

  let g:user_emmet_mode='inv'
  let g:user_emmet_leader_key=','


  let g:lightline = {
        \ 'colorscheme': 'molokai',
        \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \ [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
          \ },
          \ 'component_function': {
            \   'cocstatus': 'coc#status',
            \   'currentfunction': 'CocCurrentFunction'
            \ },
            \ }

  map <leader>mf <Plug>(easymotion-bd-f)
  nmap <leader>mf <Plug>(easymotion-overwin-f)
  nmap <leader>ms <Plug>(easymotion-overwin-f2)
  map <leader>ml <Plug>(easymotion-bd-jk)
  nmap <leader>ml <Plug>(easymotion-overwin-line)
  map <leader>mw <Plug>(easymotion-bd-w)
  nmap <leader>mw <Plug>(easymotion-overwin-w)

  nnoremap <leader>ut :UndotreeToggle<cr><C-w>h<C-w>l
  nnoremap <leader>ga :Git add .<CR>
  nnoremap <leader>gc :Git commit<CR>
  nnoremap <leader>gs :GFiles?<CR>

  nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
  nnoremap <silent> <localleader> :WhichKey '\'<CR>
  nnoremap <silent> <localleader> :WhichKey ','<CR>

  let g:UltiSnipsExpandTrigger='<TAB>'
  let g:UltiSnipsJumpForwardTrigger='<TAB>'
  let g:UltiSnipsJumpBackwardTrigger='<S-TAB>'

  " fzf - FZF
  nnoremap <leader>ff :Files<CR>
  nnoremap <leader>fg :GFiles<CR>
  nnoremap <leader>fb :Buffers<CR>
  nnoremap <leader>fcc :Commits<CR>
  nnoremap <leader>fcb :BCommits<CR>
  nnoremap <leader>fm :Marks<CR>
  nnoremap <leader>fu :Snippets<CR>
endfunction
" )))

"" SETTINGS (((
filetype indent plugin on
syntax on
set encoding=utf-8
set backspace=indent,eol,start
set background=dark
set t_Co=256
colorscheme retrobox
=======
function Indent()
  let l:view = winsaveview()
  :normal! gg=G
  call winrestview(l:view)
  " :normal! mpHmogg=G'ozt`p
endfunction

function DeleteWs() abort
  normal mz
  %s/\v\s+$//ge
  normal `z
endfunc

": SETTINGS
filetype indent plugin on
syntax on
set backspace=indent,eol,start
set background=dark
set encoding=utf-8
set t_Co=256
>>>>>>> mint

set tabstop=4
set shiftwidth=4
set textwidth=0
set expandtab
set nowrap
set number
set relativenumber
<<<<<<< HEAD
set autoindent
set copyindent
set smartindent
set autochdir
set autoread
set hidden
set cursorline
set cursorlineopt=both
set ignorecase
set smartcase
set incsearch
set nohlsearch
set number
set relativenumber
set foldmarker=(((,)))
set foldlevel=3
set foldlevelstart=3
set foldcolumn=3
=======

set autoindent
set autochdir
set autoread
set hidden
set colorcolumn=80
set cursorline
set cursorlineopt=number
set ignorecase
set smartcase
set incsearch
set foldlevel=4
set foldlevelstart=4
>>>>>>> mint
set signcolumn=yes
set laststatus=2
set showcmd
set showmatch
set scrolloff=5
<<<<<<< HEAD
set sidescrolloff=8
=======
>>>>>>> mint
set path+=**
set timeoutlen=500

set completeopt=menuone,popup
set wildmode=list:longest,full

<<<<<<< HEAD
set noundofile
set nobackup
set nowritebackup
set noswapfile
set updatetime=300
colorscheme retrobox

let mapleader=" "
let maplocalleader="\\"
"" SETTINGS )))

call plug#begin() " (((
call PrePluginSetup()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Plug 'ervandew/supertab'
Plug 'tpope/vim-commentary'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'mbbill/undotree'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
" Plug 'itchyny/lightline.vim'
" Plug 'honza/vim-snippets'
" Plug 'SirVer/ultisnips'
Plug 'liuchengxu/vim-which-key'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call PostPluginSetup()
call plug#end()
"" )))

"" MAPPINGS (((
inoremap kj <ESC>
vnoremap kj <ESC>
nnoremap <localleader>w :write<CR>
nnoremap <localleader>q ZQ
nnoremap <localleader>z ZZ
nnoremap <localleader>o :edit .<CR>
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>
nnoremap <localleader>t :shell<CR>
nnoremap <silent> <leader>nb :bnext<cr>
nnoremap <silent> <leader>pb :bprevious<cr>
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap <F8> @
nnoremap <F9> @@
nnoremap <leader>a zt
=======
set undodir=~/.vim/undodir
set directory=~/.vim/backup
set backupdir=~/.vim/backup
set undofile
set backup
set writebackup
set swapfile
set updatetime=333

let mapleader=" "
let maplocalleader="\\"
": SETTINGS

": PLUGINS
call plug#begin()
Plug 'Yggdroot/indentLine'
Plug 'mbbill/undotree'
Plug 'itchyny/lightline.vim'
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'
call plug#end()

": ¦, ┆, │, ⎸, ▏
" let g:indentLine_char = '▏'
" let g:indentLine_char = '┊'
let g:indentLine_char_list = ['▏', '▏', '▏', '¦']
let g:indentLine_setColors = 0
let g:indentLine_defaultGroup = 'SpecialKey'
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
" let g:indentLine_setConceal = 0
let g:vim_json_conceal = 0
let g:markdown_syntax_conceal = 0

let g:UltiSnipsExpandTrigger='<TAB>'
let g:UltiSnipsJumpForwardTrigger='<TAB>'
let g:UltiSnipsJumpBackwardTrigger='<S-TAB>'

let g:lightline = {
      \ 'colorscheme': 'srcery_drk',
      \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \ [ 'currentfunction', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ }

colorscheme retrobox

": MAPPINGS
inoremap kj <ESC>
vnoremap kj <ESC>

" nnoremap <leader>ut :UndotreeToggle<cr>:vertical resize -30<cr><C-w>l
nnoremap <leader>ut :UndotreeToggle<cr>

nnoremap <leader>w :write<cr>
nnoremap <leader>q ZQ
nnoremap <leader>z ZZ
nnoremap <silent> <leader>o :edit .<cr>
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <silent> <localleader>s :write<cr>:source $MYVIMRC<cr>:do FileType<cr>:do BufEnter<cr>
nnoremap <leader>t :shell<cr>

nnoremap <localleader>x :colorscheme s
nnoremap <silent> <leader>nb :bnext<cr>
nnoremap <silent> <leader>pb :bprevious<cr>
nnoremap <silent> <S-b> _
nnoremap <silent> <S-e> $
nnoremap <silent> <S-y> y$
nnoremap <silent> <F8> @
nnoremap <silent> <F9> @@
nnoremap <silent> <leader>a zt
nnoremap <silent> <leader>bn :bnext<Cr>
nnoremap <silent> <leader>bp :bprev<cr>
>>>>>>> mint
nnoremap w W
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
<<<<<<< HEAD
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>
" nnoremap <leader>rn :CocCommand document.renameCurrentWord<CR>
nnoremap <leader>rn <Plug>(coc-rename)

nnoremap <leader>to :tabnew<CR>
nnoremap <leader>tn :tabnext<CR>
nnoremap <leader>tp :tabprevious<CR>
nnoremap <leader>tc :tabclose<CR>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <silent> <M-h> <C-w>h
nnoremap <silent> <M-j> <C-w>j
nnoremap <silent> <M-k> <C-w>k
nnoremap <silent> <M-l> <C-w>l
nnoremap <leader>kk :vertical resize+5<CR>
nnoremap <leader>jj :resize+5<CR>
"" MAPPINGS )))

"" COC (((
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

"" TRIGGERS
if g:COC_TRIGGER == 1
  inoremap <silent><expr> <cr> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"
elseif g:COC_TRIGGER == 2
  inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>"
elseif g:COC_TRIGGER == 3
  inoremap <silent><expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
elseif g:COC_TRIGGER == 4
  inoremap <silent><expr> <cr> coc#pum#visible() && coc#pum#info()['index'] != -1 ? coc#pum#confirm() : "\<C-g>u\<CR>"
else
  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
endif
"" TRIGGERS

"" UNKNOWN
function! CocCurrentFunction()
  return get(b:, 'coc_current_function', '')
endfunction
"" UNKNOWN

" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"       \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <c-@> coc#refresh()
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

au CursorHold * silent call CocActionAsync('highlight')


xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

"" This augroup causes highlighting from top of file to
"" coc completion
" augroup mygroup
"   au!
"   au FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>aac  <Plug>(coc-codeaction-cursor)
nmap <leader>aas  <Plug>(coc-codeaction-source)
nmap <leader>qf  <Plug>(coc-fix-current)

nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

nmap <leader>cl  <Plug>(coc-codelens-action)

command! -nargs=0 Format :call CocActionAsync('format')
command! -nargs=? Fold :call CocAction('fold', <f-args>)
command! -nargs=0 OR   :call CocActionAsync('runCommand', 'editor.action.organizeImport')
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

nnoremap <silent><nowait> <leader>ca  :<C-u>CocList diagnostics<cr>
nnoremap <silent><nowait> <leader>ce  :<C-u>CocList extensions<cr>
nnoremap <silent><nowait> <leader>cc  :<C-u>CocList commands<cr>
nnoremap <silent><nowait> <leader>co  :<C-u>CocList outline<cr>
nnoremap <silent><nowait> <leader>cs  :<C-u>CocList -I symbols<cr>
nnoremap <silent><nowait> <leader>cj  :<C-u>CocNext<CR>
nnoremap <silent><nowait> <leader>ck  :<C-u>CocPrev<CR>
nnoremap <silent><nowait> <leader>cp  :<C-u>CocListResume<CR>
"" COC )))

"" GROUPS (((
augroup ALL " (((
  au!
  au BufEnter * call GetLine()
  au BufWritepre * call StripWhiteSpace()
  au BufWritepre * call Indent()
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
augroup END " )))

augroup ABBREV " (((
  au!
  au BufEnter * iabbrev <buffer> ifos itsf4llofstars
  au BufEnter *.py iabbrev <buffer> pirnt print
  au BufEnter *.py iabbrev <buffer> prnit print
  au BufEnter *.py iabbrev <buffer> pritn print
  au BufEnter *.py iabbrev <buffer> slef self
  au BufEnter *.py iabbrev <buffer> sefl self
  au BufEnter *.py iabbrev <buffer> self self
  au BufEnter *.py iabbrev <buffer> ptah path
  au BufEnter *.py iabbrev <buffer> paht path
augroup END " )))

augroup VIM " (((
  au!
  au FileType vim setlocal ts=2 sw=2 fdm=marker fdc=2
augroup END " )))

augroup PYTHON " (((
  au!
  au FileType python setlocal fdm=indent fdc=3
  au BufEnter *.py nnoremap <buffer> <F5> :write<CR>:!python3 %<CR>
augroup END " )))

augroup C " (((
  au!
  au FileType c setlocal fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.c,*.h, nnoremap <buffer> <leader>b o{<cr>}<esc>ko
augroup END " )))

augroup RUST " (((
  au!
  au FileType rust setlocal fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.rs nnoremap <buffer> <leader>b A{<cr>}<esc>ko
augroup END " )))

augroup ARDUINO " (((
  au!
  au FileType arduino setlocal ts=2 sw=2 fdm=indent fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
augroup END " )))

augroup BASH " (((
  au!
  au FileType sh setlocal cc=80
augroup END " )))

augroup HTML_CSS " (((
  au!
  au FileType html setlocal ts=2 sw=2 cc=80,100,120 fdc=4 fdm=manual aw updatetime=1000
  au FileType html,css nnoremap <buffer> <localleader>f Vatzf
  au BufRead,BufEnter *.html nnoremap <buffer> <localleader>c i<!----><esc>2hi<space><esc>i<space>
  au BufRead,BufEnter *.css nnoremap <buffer> <localleader>c i/**/<esc>hi<space><esc>i<space>
  au BufRead,BufEnter *.html :onoremap <buffer> it :<c-u>normal! f<vi<<cr>
  au CursorHold *.html,*.css write
augroup END " )))

" augroup TEXT " (((
"   au!
"   au BufEnter *.txt call Word()
" augroup END " )))

augroup TOML " (((
  au!
  au FileType toml setlocal ts=2 sw=2 nofen
  au BufEnter *.toml nnoremap <buffer> <leader>x 0i##<space><esc>j
augroup END " )))

augroup JSON " (((
  au!
  au fileType json syntax match Comment +\/\/.\+$+
augroup END " )))
"" GROUPS )))
=======
vnoremap <silent> J :m '>+1<cr>gv=gv
vnoremap <silent> K :m '<-2<cr>gv=gv
vnoremap <silent> < <gv
vnoremap <silent> > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>

nnoremap <silent> <leader>to :tabnew<cr>
nnoremap <silent> <leader>tn :tabnext<cr>
nnoremap <silent> <leader>tp :tabprevious<cr>
nnoremap <silent> <leader>tc :tabclose<cr>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <silent><leader>kk :vertical resize+5<cr>
nnoremap <silent><leader>ll :resize+5<cr>

augroup ALL
  au BufEnter * call GetLine()
  au BufEnter * call ShowWhitespace()
  au BufWritePre * call DeleteWs()
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
augroup END

augroup VIM
  au!
  au FileType vim silent setlocal ts=2 sw=2 fdm=indent spl=en spl+=en_us nospell
augroup END

augroup PYTHON
  au!
  au FileType python silent setlocal fdm=indent
  au BufEnter *.py nnoremap <buffer> <F5> :write<cr>:!python3 %<cr>
  au BufEnter *.py nnoremap <buffer> <F6> :!black %<cr>
  au BufEnter *.py nnoremap <buffer> <F7> :!pylint %<cr>
  au BufEnter *.py let @u=':vsplitl:edit ~/.vim/plugged/vim-snippets/UltiSnips/python_snips.txt:vertical resize -50h'
  au BufWritePre *.py call Indent()
augroup END

augroup C
  au!
  au FileType c silent setlocal ts=8 sw=8 fdm=indent cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.c,*.h nnoremap <buffer> <leader>mm :!make main<cr>
  au BufEnter *.c,*.h nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.c,*.h nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
  au BufWritePre *.c,*.h call Indent()
augroup END

augroup CPP
  au!
  au FileType c silent setlocal ts=8 sw=8 fdm=indent cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.cpp,*.h nnoremap <buffer> <leader>mm :!make main<cr>
  au BufEnter *.cpp,*.h nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.cpp,*.h nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufWritePre *.cpp,*.h call Indent()
augroup END

augroup RUST
  au!
  au FileType rust setlocal ts=8 sw=8 fdm=indent cc=80 noai nosi noci cin
  au BufEnter *.rs nnoremap <buffer> <leader>mm :cargo check<cr>
  au BufEnter *.rs nnoremap <buffer> <F5> :cargo run<cr>
  au BufEnter *.rs nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
  au BufWritePre *.rs call Indent()
augroup END

augroup TEXT
  au!
  au FileType text silent setlocal tw=79 noet wrap fdm=manual fdc=0 scl=no spl=en spl+=en_us
  au BufEnter *.txt let @u=':vsplitl:edit ~/.vim/plugged/vim-snippets/UltiSnips/python_snips.txt:vertical resize -50h'
augroup END

augroup ABBREV
  au!
  au BufEnter * iabbrev <buffer> ifos itsf4llofstars
  au BufEnter * iabbrev <buffer> emal irooted4hal@mailfence.com
  au BufEnter * iabbrev <buffer> pirnt print
  au BufEnter * iabbrev <buffer> prnit print
  au BufEnter * iabbrev <buffer> pritn print
  au BufEnter * iabbrev <buffer> prtn print
  au BufEnter * iabbrev <buffer> prnt print
  au BufEnter * iabbrev <buffer> slef self
  au BufEnter * iabbrev <buffer> sefl self
  au BufEnter * iabbrev <buffer> sfel self
  au BufEnter * iabbrev <buffer> sfle self
  au BufEnter * iabbrev <buffer> ptah path
  au BufEnter * iabbrev <buffer> paht path
  au BufEnter * iabbrev <buffer> phat path
  au BufEnter * iabbrev <buffer> phta path
  au BufEnter * iabbrev <buffer> tow two
augroup END
>>>>>>> mint
