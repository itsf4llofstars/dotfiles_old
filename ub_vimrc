" Ubuntu Raspberry Pi 4 VIMRC

"" FUNCTIONS {{{
function GetLine()
  " au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe (WRAP IN QUOTES)normal g'\" | endif
  if line("'\"") > 1 && line("'\"") <= line("$")
    exec "normal g'\""
  endif
endfunction

function Indent()
  :normal! mpHmogg=G'ozt`p
endfunction

function StripWhiteSpace()
  :normal! mpHmo
  %s/\s\+$//e
  :normal! 'ozt`p
endfunction

function ShowWhitespace()
  match ErrorMsg '\s\+$'
endfunction

function HLNext (blinktime)
  set invcursorline
  redraw
  exec 'sleep' . float2nr(a:blinktime * 1000) . 'm'
  set invcursorline
  redraw
endfunction
"" }}}

"" SETTINGS {{{
filetype indent plugin on
syntax on
set backspace=indent,eol,start
set guicursor=""
set background=dark

set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=0
set expandtab
set nowrap

set autochdir
set autoindent
set autoread
set copyindent

highlight ColorColumn ctermbg=magenta
call matchadd('ColorColumn', '\%80v', 100)

set colorcolumn=80
set cursorline
set cursorlineopt=both
set foldcolumn=0
set foldlevel=99
set foldlevelstart=99
set hidden
set nohlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw

set listchars=tab:>~,nbsp:_,trail:.
set list

set modeline
set noruler
set number
set path+=**
set relativenumber
set ruler
set scrolloff=5
set shortmess+=acsoOTSF
set showcmd
set showmatch
set showmode
set smartcase
set smartindent
" set statusline=
" set statusline=(%n)\ %F\ %m%r%w%h%q%a\ %y\ \ \ col:\ %c\ \ %p%%%=[%c:%L]\ \ \ %p%%\ -\ %P\ %f\ |
set updatetime=250

set wildmode=list:longest,full
set completeopt=menuone,popup

set noswapfile

if has("persistent_undo")
  let target_path = expand("~/.vim/undodir")

  if !isdirectory(target_path)
    call mkdir(target_path, "p", 0700)
  endif

  let &undodir=target_path
  set undofile
else
  set noundofile
  set nobackup
endif

let g:python3_host_prog = '/usr/bin/python3'
let g:netrw_banner=0
let g:netrw_liststyle=3
let g:netrw_altv=1
let g:netrw_winsize=15

call ShowWhitespace()

let mapleader=" "
let maplocalleader="\\"
"" }}}

"" PLUGINS {{{
"" ALE {{{
let g:ale_enabled = 1
let g:ale_max_signs = 10
let g:ale_completion_enabled = 1
let g:ale_completion_autoimport = 1
let g:ale_lsp_suggestions = 1
let g:ale_cursor_detail = 0 " 1 gives popup
let g:ale_virtualtext_cursor = 0
let g:ale_detail_to_floating_preview = 1
let g:ale_echo_msg_format = "% code % [%linter%] %type% "
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_warn_about_trailing_blank_lines = 1
let g:ale_warn_about_trailing_whitespace = 1
let g:ale_sign_column_always = 1

" Prevents highlights in the code proper. This is a list of strings
let g:ale_python_pylint_options = '--rcfile ~/python/pylint.conf'
let g:ale_set_highlights = 0
let g:ale_exclude_highlights = [
      \ 'docstring',
      \ 'Unused argument',
      \ 'import-errro',
      \ 'SC2164',
      \ 'inconsistent-return-statements',
      \ ]

let g:ale_linters_explicit = 1
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1 " 0 is default
"" }}}

"" VIM-PLUG {{{
call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
" Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'mbbill/undotree'
Plug 'dense-analysis/ale'
Plug 'valloric/youcompleteme'
call plug#end()

colorscheme retrobox
"" }}}

"" ALE {{{
let g:ale_linters = {
      \ 'python': ['pylint'],
      \ 'rust': ['analyzer'],
      \ 'vim': [''],
      \ 'cpp': ['clangd', 'cpplint'],
      \ 'json': ['eslint'],
      \ }
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python': ['black', 'isort'],
      \ 'rust': ['rustfmt'],
      \ 'cpp': ['clang-format'],
      \ 'json': ['prettier'],
      \}
""}}}

"" YCM {{{
let g:ycm_auto_trigger=1
let g:ycm_enable_semantic_highlighting=1 " Experimental
let g:ycm_enable_inlay_hints=1 " Experimental
let g:ycm_clear_inlay_hints_in_insert_mode=0 " Experimental
" let g:ycm_python_interpreter_path = ''
" let g:ycm_python_sys_path = []
" let g:ycm_extra_conf_vim_data = [
"   \  'g:ycm_python_interpreter_path',
"   \  'g:ycm_python_sys_path'
"   \]
" let g:ycm_global_ycm_extra_conf = '~/global_extra_conf.py'
nmap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
nmap <leader>yfd <Plug>(YCMFindSymbolInDocument)
" }}}

"" NERDTREE {{{
" let g:NERDTreeDirArrowExpandable = '▸'
" let g:NERDTreeDirArrowCollapsible = '▾'
" let g:NERDTreeQuitOnOpen = 1
" let g:NERDTreeShowHidden = 1
" " nnoremap <leader>o :NERDTreeFocus<CR>
" nnoremap <leader>o :NERDTree<CR>
" nnoremap <leader>nf :NERDTreeFind<CR>
""}}}

"" FUGITIVE {{{
nnoremap <leader>ga :Git add .<cr>
nnoremap <leader>gc :Git commit<cr>
" }}}

"" EMMET {{{
let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','
""}}}

"" EASYMOTION {{{
" <Leader>f{char} to move to {char}
map ,f <Plug>(easymotion-bd-f)
nmap ,f <Plug>(easymotion-overwin-f)
nmap ,s <Plug>(easymotion-overwin-f2)
map ,L <Plug>(easymotion-bd-jk)
nmap ,L <Plug>(easymotion-overwin-line)
map ,w <Plug>(easymotion-bd-w)
nmap ,w <Plug>(easymotion-overwin-w)
""}}}

"" UNDOTREE {{{
nnoremap <leader>ut :UndotreeToggle<cr>
"" }}}

"" SNIPMATE {{{
let g:snipMate = {'snippet_version' : 1}
ino <tab> <c-j>=TriggerSnippet()<cr>
" snor <tab> <tab>=TriggerSnippet()<cr>
"" }}}
"" END PLUGINS }}}

"" MAPPINGS {{{
inoremap kj <ESC>
vnoremap kj <ESC>

"" ALE
nnoremap <leader>alf :ALEFix<CR>
nnoremap <leader>alo :lopen<CR>
nnoremap <leader>alc :copen<CR>
nnoremap <leader>all :ALELint<CR>
nnoremap <leader>alt :ALEToggle<CR>
nnoremap <leader>ali :ALEInfo<CR>
nmap <silent> <C-p> <Plug>(ale_previous_wrap)
nmap <silent> <C-n> <Plug>(ale_next_wrap)

nnoremap <silent> <leader>w :write<cr>
nnoremap <silent> <leader>q ZQ
nnoremap <silent> <leader>z ZZ
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <silent> <leader>o :edit .<CR>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>
nnoremap <leader>t :write<CR>:shell<CR>

nnoremap <C-f> <C-d>

nnoremap <leader>p "+p
nnoremap ; :
nnoremap : ;
nnoremap w W
nnoremap ,a zt
nnoremap ,b zb
nnoremap ,z zz
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
nnoremap <F8> @
nnoremap <F9> @@
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>

nnoremap <localleader>sh gg/<<<<<<<<CR>dd/=======<CR>V/>>>>>>><CR>d<ESC>
nnoremap <localleader>sr gg/<<<<<<<<CR>V/=======<CR>d/>>>>>>><CR>dd<ESC>
nnoremap <localleader>sb gg/<<<<<<<<CR>dd/=======<CR>dd/>>>>>>><CR>dd<ESC>
nnoremap <localleader>sn /<<<<<<<<CR>

nnoremap ,w( :normal! ebi(<esc>ea)<esc>
nnoremap ,w[ :normal! ebi[<esc>ea]<esc>
nnoremap ,w{ :normal! ebi{<esc>ea}<esc>
nnoremap ,w< :normal! ebi<<esc>ea><esc>

nnoremap <silent> <localleader>to :tabnew<CR>
nnoremap <silent> <localleader>tn :tabnext<CR>
nnoremap <silent> <localleader>tp :tabprevious<CR>
nnoremap <silent> <localleader>tc :tabclose<CR>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l
nnoremap <leader>hh :vertical resize+1<CR>
nnoremap <leader>ll :vertical resize-1<CR>
nnoremap <leader>jj :resize+1<CR>
nnoremap <leader>kk :resize-1<CR>
nnoremap <leader>rs <C-w>=
" nnoremap <leader>x :<c-u>execute normal! mpgg02WdwiHELLO \<lt>esc>'p<cr>
"" }}}

"" AUTOGROUP AUGROUP {{{
augroup ALL " {{{
  au!
  au InsertEnter * set nornu
  au InsertLeave * set rnu
  au BufReadPost * call GetLine()
  au BufWritePre * call StripWhiteSpace()
augroup END " }}}

augroup VIM " {{{
  au!
  au FileType vim setlocal ts=2 sw=2 sts=2 fdc=3 fdm=marker
augroup END " }}}

augroup PYTHON " {{{
  au!
  au FileType python setlocal fdm=indent fdc=3
  au BufEnter *.py nnoremap <buffer> <F5> :write<cr>:!python3 %<CR>
  au BufEnter *.py nnoremap <buffer> <F6> :!black %<CR>
  au BufEnter *.py nnoremap <buffer> <F7> :!pylint --rcfile=~/python/pylint.conf %<CR>
  au BufEnter *.py inoremap <buffer> <silent> <C-l> <Plug>(YCMToggleSignatureHelp)
augroup END " }}}

augroup C " {{{
  au!
  au FileType c,cpp silent setlocal ts=4 sw=4 sts=4 et nowrap noai nosi
        \ noci cin cino=ln,c2 fdc=4 fdm=indent
  au BufEnter *.c nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  au BufEnter *.c nnoremap <buffer> <F5> :!./main<cr>
  au BufEnter *.c nnoremap <buffer> <leader>mm :write<cr>:!make main<cr>
augroup END " }}}

augroup RUST " {{{
  au!
  au FileType rust silent setlocal ts=4 sw=4 sts=4 et nowrap noai nosi
        \ noci cin cino=ln,c2 fdc=3 fdm=indent
  au BufEnter *.rs nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
  au BufEnter *.rs nnoremap <buffer> <F5> :!cargo run<cr>
  au BufEnter *.rs nnoremap <buffer> <leader>mm :write<cr>:!cargo build<cr>
augroup END " }}}

augroup BASH " {{{
  au!
  au FileType sh silent setlocal ts=4 sts=4 sw=4 fdc=0
  au BufEnter *.sh nnoremap <buffer> <F5> :!./%<CR>
augroup END " }}}

augroup TEXT " {{{
  au!
  au FileType text silent setlocal noai nosi ci noet wrap nornu
augroup END " }}}

" augroup NERDTREE " {{{
"   au!
"   au StdinReadPre * let s:std_in=1
"   " au VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"   au BufEnter * if tabpagenr('$') == 1
"         \ && winnr('$') == 1
"         \ && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
"   au BufEnter * if winnr('$') == 1 && exists('b:NERDTree')
"         \ && b:NERDTree.isTabTree() | quit | endif
"   au BufEnter * if bufname('#') =~ 'NERD_tree_\d\+'
"         \ && bufname('%') !~ 'NERD_tree_\d\+'
"         \ && winnr('$') > 1 | let buf=bufnr() | buffer#
"         \ | execute =======>\"normal! \<C-W>w" | execute 'buffer'.buf | endif
" augroup END " }}}

augroup GITCOMMIT " {{{
  au!
  au FileType gitcommit setlocal tw=50
augroup END " }}}

augroup MyYCMCustom " {{{
  au!
  au FileType c,cpp let b:ycm_hover = {
        \ 'command': 'GetDoc',
        \ 'syntax': &filetype
        \ }
augroup END " }}}

augroup SKELETON " {{{
  au!
  au BufNewFile *.py 0r ~/.vim/skeleton/skeleton.py
  au BufNewFile *.c 0r ~/.vim/skeleton/skeleton.c
  au BufNewFile *.sh 0r ~/.vim/skeleton/skeleton.sh
augroup END " }}}

augroup TEST " {{{
    au!
    au BufEnter *.tex gg0GoBufEnter<esc>gg
    au BufWinEnter *.tex echo "BufWinEnter 1"
augroup END
" }}}

" augroup ALEGROUP {{{
"     au!
"     au User ALELintPre    call YourFunction()
"     au User ALELintPost   call YourFunction()
"
"     au User ALEJobStarted call YourFunction()
"
"     au User ALEFixPre     call YourFunction()
"     au User ALEFixPost    call YourFunction()
" augroup END }}}

augroup BOTTOM " {{{
  au!
  au FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ib :<C-u>normal! 0f[vi[<CR>
  au FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap it :<C-u>normal! 0f<vi<<CR>
  au FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ir :<C-u>normal! 0f{vi{<CR>
  au FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ip :<C-u>normal! 0f(vi(<CR>
augroup END " }}}
"" }}}
