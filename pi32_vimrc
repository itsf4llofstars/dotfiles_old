"" Vim .vimrc file

"" functions (((
function Indent()
  :normal! mpHmogg=G'ozt`p
endfunction

function GitBuf()
  :normal! gg0
endfunction

function GetCursor()
  if line("'\"") > 1 && line("'\"") <= line("$")
    exe "normal g'\""
  endif
endfunction
"" )))

"" settings (((
filetype plugin indent on
syntax on
set guicursor=""
set background=dark
set t_Co=256

set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=0
set expandtab
set nowrap

set autochdir
set autoread
set autoindent
set copyindent
set cursorline
set cursorlineopt=number
set completeopt=menuone,popup
set foldcolumn=0
set foldlevel=3
set foldlevelstart=2
set hidden
set incsearch
set ignorecase
set laststatus=2
set lazyredraw
set modeline
set number
set nohlsearch
set noruler
set path+=**
set relativenumber
set signcolumn=yes
set statusline=
set statusline=(%n)\ %F\ %m%r%w%h%q%a\ %y%=col:\ %c\ \ line:[%l:%L]\ \ \ \ %p%%\ -%P\ \ \ |
set shortmess+=acsoOTSF
set showmatch
set showcmd
set smartcase
set smartindent
set scrolloff=5
set showmode
set updatetime=250
set wildmode=list:longest,full

"" other symbols were causing indentation errors
set foldmarker=((\(,))\)

set noundofile
set nobackup
set noswapfile

let mapleader=" "
let maplocalleader="\\"
"" )))

"" plugins (((
"" ale (((
let g:ale_enabled = 1
let g:ale_set_signs = 1
let g:ale_max_signs = -1
let g:ale_close_preview_on_insert = 1
let g:ale_completion_enabled = 1
let g:ale_disable_lsp = 0
let g:ale_lsp_suggestions = 1
let g:ale_linters_explicit = 1
let g:ale_warn_about_trailing_blank_lines = 1
let g:ale_warn_about_trailing_whitespace = 1
let g:ale_virtualtext_cursor = 'all' " 'current', 'disabled', 'all'
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_loclist_msg_format = '[%linter%] %s [%severity%]'

let g:ale_sign_column_always = 1
let g:ale_set_highlights = 1
let g:ale_popup_menu_enabled = 0
let g:ale_detail_to_floating_preview = 1
let g:ale_cursor_detail = 1
let g:ale_hover_cursor = 0
let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_echo_cursor = 0
let g:ale_disable_lsp = 0
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0
" )))

"" vim-plug (((
call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dense-analysis/ale'
Plug 'mbbill/undotree'
Plug 'nvie/vim-flake8'
" Plug 'itchyny/lightline.vim'
" Plug 'msanders/snipmate.vim'
" Plug 'honza/vim-snippets'
" Plug 'SirVer/ultisnips'
call plug#end()

colorscheme retrobox
"" )))

"" fugitive (((
nnoremap <leader>ga :Git add .<CR>
nnoremap <leader>gc :Git commit<CR>
"" )))

"" ale (((
let g:ale_linters = {
      \ 'python': ['flake8'],
      \ 'rust': ['analyzer'],
      \ 'vim': [''],
      \ 'cpp': ['clangd', 'cpplint'],
      \ 'json': ['eslint'],
      \ }
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python': ['black', 'isort'],
      \ 'rust': ['rustfmt'],
      \ 'cpp': ['clang-format'],
      \ 'json': ['prettier'],
      \ }

nnoremap <leader>alf :ALEFix<CR>
nnoremap <leader>alo :lopen<CR>
nnoremap <leader>alc :copen<CR>
nnoremap <leader>all :ALELint<CR>
nnoremap <leader>alt :ALEToggle<CR>
nnoremap <leader>ali :ALEInfo<CR>
nmap <silent> <C-p> <Plug>(ale_previous_wrap)
nmap <silent> <C-n> <Plug>(ale_next_wrap)
" )))

"" nerdtree (((
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
nnoremap <leader>o :NERDTreeFocus<CR>
" nnoremap <leader>o :NERDTree<CR>
nnoremap <leader>nf :NERDTreeFind<CR>
"" )))

"" emmet (((
let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','
"" )))

"" lightline (((
"" laststatus equals 2, noshowmode must be set
"" powerline, wombat, solarized, PaperColor, one
"" LIGHTLINE ADVANCED
"" See Vim-Awesome
" let g:lightline = {'colorscheme': 'wombat',}
"" )))

"" easymotion (((
" <Leader>f{char} to move to {char}
map ,f <Plug>(easymotion-bd-f)
nmap ,f <Plug>(easymotion-overwin-f)
nmap ,s <Plug>(easymotion-overwin-f2)
map ,L <Plug>(easymotion-bd-jk)
nmap ,L <Plug>(easymotion-overwin-line)
map ,w <Plug>(easymotion-bd-w)
nmap ,w <Plug>(easymotion-overwin-w)
"" )))
"" )))

"" mappings (((
inoremap kj <ESC>
vnoremap kj <ESC>

nnoremap <leader>in :call Indent()<CR>

nnoremap <cr> <C-g>

nnoremap <silent> <leader>w :write<cr>
nnoremap <silent> <leader>q ZQ
nnoremap <silent> <leader>z ZZ
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>
" nnoremap <leader>t :write<CR>:shell<CR>
nnoremap <leader>t :write<CR>:terminal<CR>

nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap w W
nnoremap ,a zt
nnoremap ,b zb
nnoremap ,z zz
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
nnoremap <F8> @
nnoremap <F9> @@
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>
nnoremap <localleader>sh gg/<<<<<<<<CR>dd/=======<CR>V/>>>>>>><CR>d<ESC>
nnoremap <localleader>sr gg/<<<<<<<<CR>V/=======<CR>dd/>>>>>>><CR>dd<ESC>
nnoremap <localleader>sb gg/<<<<<<<<CR>dd/=======<CR>dd/>>>>>>><CR>dd<ESC>
nnoremap <localleader>fc /<<<<<<<<CR>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l
nnoremap <leader>hh :vertical resize+1<CR>
nnoremap <leader>ll :vertical resize-1<CR>
nnoremap <leader>jj :resize+1<CR>
nnoremap <leader>kk :resize-1<CR>
nnoremap <leader>rs <C-w>=
"" )))

"" groups (((
augroup ALL " (((
  autocmd!
  autocmd InsertLeave * set rnu
  autocmd InsertEnter * set nornu
  autocmd BufReadPost * call GetCursor()
  " autocmd BufWritePre * %s/\s\+$//e
  autocmd BufWritePre $MYVIMRC,*.vim,*.sh,*.c,*.h,*.html,*.css call Indent()
  autocmd VimLeavePre $MYVIMRC,*.vim,*.py,*.sh,*.c,*.h,*.html,*.css :normal! mp
  autocmd BufEnter $MYVIMRC,*.vim,*.py,*.sh,*.c,*.h,*.html,*.css :normal! `p
augroup END " )))

augroup VIM " (((
  autocmd!
  autocmd FileType vim setlocal ts=2 sw=2 sts=2 fdc=3 fdm=marker cc=80 fdl=0 fdls=0
augroup END " )))

augroup PYTHON " (((
  autocmd!
  autocmd FileType python setlocal cc=90,100 fdm=indent fdc=3 fdl=3 fdls=2
  autocmd BufEnter *.py nnoremap <buffer> <F5> :!python3 %<CR>
  autocmd BufEnter *.py nnoremap <buffer> <F6> :!black %<CR>
augroup END " )))

augroup C " (((
  autocmd!
  autocmd FileType c,cpp silent setlocal noai nosi noci cin cino=ln,c4 fdc=4
        \ fdm=indent cc=82 fdl=3 fdls=1
  autocmd FileType c nnoremap <buffer> <leader>b o{<cr>}<esc>ko
  autocmd BufEnter *.c,*.h,*.cpp nnoremap <buffer> <leader>mm :write<CR>:!make main<CR>
  autocmd BufEnter *.c,*.h,*.cpp nnoremap <buffer> <F7> :!./main<CR>
augroup END " )))

augroup ARDUINO " (((
  autocmd!
  autocmd FileType arduino silent setlocal ts=3 sw=2 sts=2 noai nosi noci cin
        \ cino=ln,c3 fdc=3 fdm=indent cc=80 fdl=3 fdls=1
  autocmd FileType arduino nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
augroup END " )))

augroup BASH " (((
  autocmd!
  autocmd FileType sh silent setlocal cc=81 nofen fdc=0
  autocmd BufEnter *.sh nnoremap <buffer> <F6> :write<cr>:!./%<CR>
augroup END " )))

augroup TEXT " (((
  autocmd!
  autocmd FileType text silent setlocal tw=79 noet wrap cc=80
  autocmd BufEnter *.txt colorscheme quiet
  autocmd BufLeave *.txt colorscheme retrobox
augroup END " )))

augroup PLAINTEXT " (((
  autocmd!
  autocmd Filetype plaintex silent setlocal tw=61 noet wrap cc=60
  autocmd BufEnter *.tex colorscheme quiet
  autocmd BufLeave *.tex colorscheme retrobox
augroup END " )))

augroup TEST " (((
  au!
  au Filetype * nnoremap <buffer> <leader>x :normal! mpHmoGoHello from augroup TEST<ESC>'ozt`p
augroup END " )))

augroup GITCOMMIT " (((
  au!
  autocmd FileType gitcommit setlocal tw=70 wrap cc=50,70
  autocmd BufEnter COMMIT_EDITMSG call GitBuf()
  autocmd BufEnter COMMIT_EDITMSG colorscheme wildcharm
  autocmd BufLeave COMMIT_EDITMSG colorscheme retrobox
augroup END " )))

augroup HELP
  au!
  au Filetype help colorscheme retrobox
  au BufEnter mstrvi.txt colorscheme retrobox
augroup END

augroup BOTTOM " (((
  autocmd!
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ib :<C-u>normal! 0f[vi[<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap it :<C-u>normal! 0f<vi<<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ir :<C-u>normal! 0f{vi{<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ip :<C-u>normal! 0f(vi(<CR>
augroup END " )))
"" )))
