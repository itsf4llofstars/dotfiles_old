"          _
"  __   __(_) _ __ ___   _ __  ___
"  \ \ / /| || '_ ` _ \ | '__|/ __|
"  _\ V / | || | | | | || |  | (__
" (_)\_/  |_||_| |_| |_||_|   \___|
"

"" Table (Search for [nn])
"" settings [sx]
"" vim plug [px]
"" mappings [mx]
"" groups [gx]

"" settings sx (((
filetype plugin indent on
syntax on
set guicursor=""
set background=dark
colorscheme retrobox

set expandtab
set nowrap

set autoindent
set copyindent
set smartindent

set autochdir
set autoread
set hidden

set cursorline
set cursorlineopt=number

set ignorecase
set smartcase
set incsearch
set nohlsearch

set number
set relativenumber

set foldmarker=(((,)))
set signcolumn=yes
set laststatus=2
set noruler
set modeline

set showmatch
set showcmd

set statusline=
" set statusline=(%n)\ %F\ %h%m%r%w\ [%Y]\ %q%=%-14.(col:\ %c\ [%l:%L]%)\ (%b\ 0x%B)\ (%o\ -\ 0x%O)\ %a\ %p%%\ %P\ %t\ |

" noshowmode for lightline
set noshowmode

set scrolloff=5
set sidescrolloff=8
set path+=**

set updatetime=250
set completeopt=menuone,popup
set wildmode=list:longest,full

set noundofile
set noswapfile
set backupdir=~/.vim/backup
set writebackup
set backup

let mapleader=" "
let maplocalleader="\\"
" )))

"" ALE (((
let g:ale_set_signs = 2
let g:ale_max_signs = 0
" let g:ale_close_preview_on_insert = 2
let g:ale_completion_enabled = 2
let g:ale_lsp_suggestions = 2
let g:ale_linters_explicit = 2
let g:ale_warn_about_trailing_blank_lines = 2
let g:ale_warn_about_trailing_whitespace = 2

" 3=all, 1=current, 0=disabled
" let g:ale_virtualtext_cursor = 'all'
let g:ale_virtualtext_cursor = 2
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_format = '%code: %%s [%type%] [%linter%]'
let g:ale_loclist_msg_format = '%code: %%s [%severity%] [%linter%]'
let g:ale_sign_column_always = 2
let g:ale_set_highlights = 2
let g:ale_popup_menu_enabled = 1

"" Set preview 2, detail 0.
"" bubble will show with err/warn info
let g:ale_detail_to_floating_preview = 2
let g:ale_cursor_detail = 1

let g:ale_floating_window_border = ['│', '─', '╭', '╮', '╯', '╰', '│', '─']
let g:ale_disable_lsp = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_insert_leave = 2
let g:ale_lint_on_enter = 2
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 2
let g:ale_open_list = 1
let g:ale_lint_on_save = 2
let g:ale_fix_on_save = 2
let g:ale_enabled = 2 " )))

"" vim plug (((
call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
" Plug 'dense-anlysis/ale'
Plug 'mbbill/undotree'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-fugitive'
" Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'itchyny/lightline.vim'
Plug 'msanders/snipmate.vim'
Plug 'honza/vim-snippets'
Plug 'liuchengxu/vim-which-key'
call plug#end()

"" ALE
let g:ale_linters = {
      \ 'python': ['flake8'],
      \ 'rust': ['analyzer'],
      \ 'vim': [''],
      \ 'cpp': ['clangd', 'cpplint'],
      \ 'c': ['cppcheck', 'cpplint'],
      \ 'json': ['eslint'],
      \ }
let g:ale_fixers = {
      \ '*': ['remove_trailing_lines', 'trim_whitespace'],
      \ 'python': ['black', 'isort'],
      \ 'rust': ['rustfmt'],
      \ 'cpp': ['clang-format'],
      \ 'c': ['clang-format'],
      \ 'json': ['prettier'],
      \ }

nnoremap <leader>alf :ALEFix<CR>
nnoremap <leader>alo :lopen<CR>
nnoremap <leader>alc :copen<CR>
nnoremap <leader>all :ALELint<CR>
nnoremap <leader>alt :ALEToggle<CR>
nnoremap <leader>ali :ALEInfo<CR>
nmap <silent> <C-p> <Plug>(ale_previous_wrap)
nmap <silent> <C-n> <Plug>(ale_next_wrap)

let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','

map ,f <Plug>(easymotion-bd-f)
nmap ,f <Plug>(easymotion-overwin-f)
nmap ,s <Plug>(easymotion-overwin-f2)
map ,L <Plug>(easymotion-bd-jk)
nmap ,L <Plug>(easymotion-overwin-line)
map ,w <Plug>(easymotion-bd-w)
nmap ,w <Plug>(easymotion-overwin-w)

nnoremap <leader>ut :UndotreeToggle<cr><C-w>h<C-w>l
nnoremap <leader>ga :Git add .<CR>
nnoremap <leader>gc :Git commit<CR> "

nnoremap <silent> <leader> :WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :WhichKey '\'<CR>

" The colorscheme for lightline.vim.
" Currently, wombat, solarized, powerline, powerlineish,
" jellybeans, molokai, seoul256, darcula,
" selenized_dark, selenized_black, selenized_light, selenized_white,
" Tomorrow, Tomorrow_Night, Tomorrow_Night_Blue,
" Tomorrow_Night_Bright, Tomorrow_Night_Eighties, PaperColor,
" landscape, one, materia, material, OldHope, nord, deus,
" simpleblack, srcery_drk, ayu_mirage, ayu_light, ayu_dark,
" apprentice, rosepine, and 16color are available.
let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ }
"" )))

"" mappings mx (((
inoremap kj <ESC>
vnoremap kj <ESC>

" Personal map and script to clear the mouse pointer
nnoremap <leader>t :!tt<cr><cr>

nnoremap <leader>ut :UndotreeToggle<cr><C-w>h<C-w>l

nnoremap <silent> <leader>w :write<cr>
nnoremap <silent> <leader>q ZQ
nnoremap <silent> <leader>z ZZ
nnoremap <silent> <leader>o :edit .<CR>
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>
" nnoremap <leader>t :write<CR>:shell<CR>
nnoremap <localleader>t :write<CR>:terminal<CR>

nnoremap <C-f> <C-d>
nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap w W
nnoremap ,a zt
nnoremap ,b zb
nnoremap ,z zz
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
nnoremap <F8> @
nnoremap <F9> @@
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>
nnoremap <leader>L :s/\<<C-r><C-w>\>//gI<left><left><left>

nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>nt :tabnext<CR>
nnoremap <leader>pt :tabprevious<CR>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l
nnoremap <leader>hh :vertical resize+1<CR>
nnoremap <leader>ll :vertical resize-1<CR>
nnoremap <leader>jj :resize+1<CR>
nnoremap <leader>kk :resize-1<CR>
nnoremap <leader>rs <C-w>= " )))

"" groups gx (((
augroup ALL " (((
  au!
  au BufWritepre $MYVIMRC,*.vim,*.c,*.h,*.html,*.css,*.cpp,*.py :normal! mpHmogg=G'ozt`p
  au BufWritePre,VimLeave * :normal! mp
  au BufWritePre * %s/\s\+$//e
  au BufWritePost,VimEnter * :normal! `p
  au BufEnter * iabbrev teh the
  au BufEnter * iabbrev tow two
  au InsertEnter * silent set nornu
  au InsertLeave * silent set rnu
augroup END " )))

augroup COMMON
  au!
  au FileType c,rust,arduino setlocal ts=4 sw=4 sts=4 tw=0 fdm=indent fdc=3 fdl=2 fdls=1 cc=80 noai nosi cin cino=ln,c2
  au BufEnter *.c,*.h,*.rs nnoremap <buffer> <leader>b 1A {<cr>}<esc>ko
augroup END

augroup VIM " (((
  au!
  au FileType vim setlocal ts=3 sw=2 sts=2 tw=0 fdm=marker fdc=0
augroup END " )))

augroup PYTHON " (((
  au!
  au FileType python setlocal ts=5 sw=4 sts=4 tw=0
  au BufEnter *.py let @s=":vsplitl:edit ~/notes/pysnips.snippets:vertical resize-44h"
augroup END " )))

augroup C " (((
  au!
  au FileType c echo &filetype
  au BufEnter *.c,*.h,*.rs let @s=":vsplitl:edit ~/notes/c_snips.txt:vertical resize-44h"
augroup END " )))

augroup RUST " (((
  au!
  au FileType rust echo &filetype
augroup END " )))

augroup ARDUINO " (((
  au!
  au FileType arduino silent setlocal ts=2 sw=2 sts=2 tw=0
  au FileType arduino echo &filetype
  au BufEnter *.ino let @s=":vsplitl:edit ~/notes/c_snips.txt:vertical resize-45h"
augroup END " )))

augroup BASH " (((
  au!
  au FileType sh setlocal ts=5 sw=4 sts=4 tw=0
augroup END " )))
" )))
