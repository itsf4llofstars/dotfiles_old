function Indent()
  :normal! mpgg=G`p
endfunction

function GitBuf()
  :normal! gg0
endfunction

filetype plugin indent on
syntax on
set guicursor=""
set background=dark
set t_Co=256

set tabstop=4
set shiftwidth=4
set softtabstop=4
set textwidth=0
set expandtab
set nowrap

set autochdir
set autoread
set autoindent
set copyindent
set cursorline
set cursorlineopt=number
set completeopt=menuone,popup
set foldcolumn=0
set foldlevel=1
set foldlevelstart=1
set hidden
set incsearch
set ignorecase
set laststatus=2
set lazyredraw
set modeline
set number
set nohlsearch
set noruler
set path+=**
set relativenumber
set signcolumn=yes
set statusline=
set statusline=(%c)\ %F\ %m%r%w%h%q%a\ %y%=col:\ %c\ \ line:[%l:%L]\ \ \ \ %p%%\ -\ %P\ \ |
set shortmess+=acsoOTSF
set showmatch
set showcmd
set smartcase
set smartindent
set scrolloff=5
set noshowmode
set updatetime=250
set wildmode=list:longest,full

set noundofile
set nobackup
set noswapfile

let mapleader=" "
let maplocalleader="\\"

let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1
let g:ale_sign_column_always = 1
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

call plug#begin()
Plug 'morhetz/gruvbox'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'mattn/emmet-vim'
Plug 'easymotion/vim-easymotion'
Plug 'christoomey/vim-tmux-navigator'
Plug 'mbbill/undotree'
Plug 'w0rp/ale'
Plug 'nvie/vim-flake8'
Plug 'itchyny/lightline.vim'
" Plug 'msanders/snipmate.vim'
" Plug 'honza/vim-snippets'
" Plug 'SirVer/ultisnips'
" Plug 'valloric/youcompleteme'
call plug#end()

colorscheme gruvbox

let g:ale_linters = {
      \ 'python': ['flake8', 'pylint'],
      \ 'vim': ['vimls', 'vint'],
      \ }
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace'],
      \   'python': ['black'],
      \}

let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeShowHidden = 1
nnoremap <leader>o :NERDTreeFocus<CR>
" nnoremap <leader>o :NERDTree<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

let g:user_emmet_mode='inv'
let g:user_emmet_leader_key=','

"" laststatus equals 2, noshowmode must be set
"" powerline, wombat, solarized, PaperColor, one
"" LIGHTLINE ADVANCED
"" See Vim-Awesome
let g:lightline = {'colorscheme': 'wombat',}

" <Leader>f{char} to move to {char}
map ,f <Plug>(easymotion-bd-f)
nmap ,f <Plug>(easymotion-overwin-f)
nmap ,s <Plug>(easymotion-overwin-f2)
map ,L <Plug>(easymotion-bd-jk)
nmap ,L <Plug>(easymotion-overwin-line)
map ,w <Plug>(easymotion-bd-w)
nmap ,w <Plug>(easymotion-overwin-w)

inoremap kj <ESC>
vnoremap kj <ESC>

nnoremap <cr> <C-g>

nnoremap <silent> <leader>w :write<cr>
nnoremap <silent> <leader>q ZQ
nnoremap <silent> <leader>z ZZ
nnoremap <silent> <localleader>e :edit $MYVIMRC<cr>
nnoremap <silent> <localleader>ve :vsplit<cr><C-w>l:edit $MYVIMRC<cr>
nnoremap <localleader>s :write<cr>:source $MYVIMRC<cr>
nnoremap <leader>t :write<CR>:shell<CR>

nnoremap <silent> <leader>bn :bnext<cr>
nnoremap <silent> <leader>bp :bprevious<cr>
nnoremap <leader>p "+p
nnoremap w W
nnoremap ,a zt
nnoremap ,b zb
nnoremap ,z zz
nnoremap <S-b> _
nnoremap <S-e> $
nnoremap <S-y> y$
nnoremap n nzz
nnoremap N Nzz
nnoremap ' `
nnoremap '' ``
nnoremap <F8> @
nnoremap <F9> @@
nnoremap J :m '>+1<CR>gv=gv
nnoremap K :m '<-2<CR>gv=gv
vnoremap < <gv
vnoremap > >gv
nnoremap <leader>* :%s/\<<C-r><C-w>\>//gI<left><left><left>
nnoremap <leader>& :%s/\<<C-r><C-w>\>//gIc<left><left><left><left>
nnoremap <localleader>sh gg/<<<<<<<<CR>dd/=======<CR>V/>>>>>>><CR>d<ESC>
nnoremap <localleader>sr gg/<<<<<<<<CR>V/=======<CR>dd/>>>>>>><CR>dd<ESC>
nnoremap <localleader>sb gg/<<<<<<<<CR>dd/=======<CR>dd/>>>>>>><CR>dd<ESC>
nnoremap <localleader>fc /<<<<<<<<CR>

nnoremap <silent> <leader>v :vsplit<cr><C-w>l
nnoremap <silent> <leader>s :split<cr><C-w>j
nnoremap <silent> <C-h> <C-w>h
nnoremap <silent> <C-j> <C-w>j
nnoremap <silent> <C-k> <C-w>k
nnoremap <silent> <C-l> <C-w>l
nnoremap <leader>hh :vertical resize+1<CR>
nnoremap <leader>ll :vertical resize-1<CR>
nnoremap <leader>jj :resize+1<CR>
nnoremap <leader>kk :resize-1<CR>
nnoremap <leader>rs :<C-w>=<cr>

augroup ALL
  autocmd!
  autocmd InsertLeave * set rnu
  autocmd InsertEnter * set nornu
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal g'\"" | endif
  autocmd BufWritePre * %s/\s\+$//e
  autocmd BufWritePre $MYVIMRC,*.vim,*.py,*.sh,*.c,*.h,*.html,*.css call Indent()
augroup END

augroup VIM
  autocmd!
  autocmd FileType $MYVIMRC,vim setlocal ts=2 sw=2 sts=2 fdc=1 cc=80
  autocmd BufWritePre,BufEnter $MYVIMRC set ts=2 sw=2 sts=2 tw=0 fdc=1
  autocmd BufWritePre $MYVIMRC,*.vim :normal! mpgg=G`p
augroup END

augroup PYTHON
  autocmd!
  autocmd FileType python setlocal cc=88,100 fdm=indent fdc=3 fdl=2 fdls=2
  autocmd BufEnter *.py nnoremap <buffer> <F5> :write<cr>:!python3 %<CR>
augroup END

augroup C
  autocmd!
  autocmd FileType c,cpp silent setlocal noai nosi noci cin cino=ln,c2 fdc=4
        \ fdm=indent cc=80
  autocmd FileType c nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
augroup END

augroup ARDUINO
  autocmd!
  autocmd FileType arduino silent setlocal ts=2 sw=2 sts=2 noai nosi noci cin
        \ cino=ln,c2 fdc=3 fdm=indent cc=80
  autocmd FileType arduino nnoremap <buffer> <leader>b A<space>{<cr>}<esc>ko
augroup END

augroup BASH
  autocmd!
  autocmd FileType sh silent setlocal cc=80 nofen fdc=0
  autocmd BufEnter *.sh nnoremap <buffer> <F5> :write<cr>:!./%<CR>
augroup END

augroup TEXT
  autocmd!
  autocmd FileType text silent setlocal ts=8 sw=8 sts=4 tw=78 noet wrap cc=80
  autocmd BufEnter *.txt colorscheme darkblue
  autocmd BufLeave *.txt colorscheme gruvbox
augroup END

augroup TEST
  au!
  au Filetype * nnoremap <buffer> <leader>x :normal! mpGoHello from augroup TEST<ESC>`p
augroup END

augroup GiTCOMMIT
  au!
  au FileType gitcommit setlocal tw=50 cc=50
  au FileType gitcommit call GitBuf()
augroup END

augroup BOTTOM
  autocmd!
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ib :<C-u>normal! 0f[vi[<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap it :<C-u>normal! 0f<vi<<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ir :<C-u>normal! 0f{vi{<CR>
  autocmd FileType arduino,python,c,cpp,sh,vim,rust
        \ :onoremap ip :<C-u>normal! 0f(vi(<CR>
augroup END
